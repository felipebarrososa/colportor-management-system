# Multi-stage build para produção com Node.js e WhatsApp
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
WORKDIR /app
EXPOSE 8080
EXPOSE 3001

# Instalar Node.js 18
RUN apt-get update && apt-get install -y curl && \
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Instalar dependências do sistema para Puppeteer
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    ca-certificates \
    procps \
    libxss1 \
    git \
    && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src
COPY ["src/Colportor.Api/Colportor.Api.csproj", "src/Colportor.Api/"]
COPY ["src/Colportor.Worker/Colportor.Worker.csproj", "src/Colportor.Worker/"]
RUN dotnet restore "src/Colportor.Api/Colportor.Api.csproj"
COPY . .
WORKDIR "/src/src/Colportor.Api"
RUN dotnet build "Colportor.Api.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "Colportor.Api.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .

# Copiar e instalar serviço WhatsApp
COPY whatsapp-service/ /app/whatsapp/
WORKDIR /app/whatsapp
RUN npm install --production

# Voltar para diretório principal
WORKDIR /app

# Criar diretório para sessão do WhatsApp
RUN mkdir -p /app/whatsapp/.wwebjs_auth

# Script de inicialização melhorado
RUN echo '#!/bin/bash\n\
echo "=== INICIANDO CONTAINER ===="\n\
echo "Verificando Node.js..."\n\
node --version\n\
echo "Verificando npm..."\n\
npm --version\n\
echo "Verificando diretório WhatsApp..."\n\
ls -la /app/whatsapp/\n\
echo "Verificando package.json..."\n\
cat /app/whatsapp/package.json\n\
echo "Iniciando WhatsApp service..."\n\
cd /app/whatsapp\n\
echo "Diretório atual: $(pwd)"\n\
echo "Iniciando npm start em background..."\n\
npm start > /app/whatsapp.log 2>&1 &\n\
WHATSAPP_PID=$!\n\
echo "WhatsApp PID: $WHATSAPP_PID"\n\
echo "Aguardando WhatsApp inicializar..."\n\
sleep 45\n\
echo "Verificando se WhatsApp está rodando..."\n\
ps aux | grep node\n\
curl -f http://localhost:3001/status || echo "WhatsApp ainda não está pronto"\n\
echo "Logs do WhatsApp:"\n\
tail -20 /app/whatsapp.log\n\
echo "Iniciando API..."\n\
cd /app && exec dotnet Colportor.Api.dll' > /app/start.sh && chmod +x /app/start.sh

# Configurações de produção
ENV ASPNETCORE_ENVIRONMENT=Production
ENV ASPNETCORE_URLS=http://+:8080
ENV WHATSAPP_SERVICE_URL=http://localhost:3001
ENV WHATSAPP_PORT=3001
ENV NODE_ENV=production

# Usar CMD padrão para Railway (só API)
CMD ["dotnet", "Colportor.Api.dll"]
