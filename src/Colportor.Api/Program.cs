using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using Colportor.Api.Extensions;
using Colportor.Api.Data;
using Colportor.Api.Services;
using Colportor.Api.DTOs;
using Microsoft.EntityFrameworkCore;
using Serilog;
using AspNetCoreRateLimit;
using Npgsql;

var builder = WebApplication.CreateBuilder(args);

// Configurar Serilog
builder.Host.UseSerilog((context, configuration) =>
    configuration.ReadFrom.Configuration(context.Configuration));

// Configurar serviços
builder.Services.AddDatabaseServices(builder.Configuration);
builder.Services.AddApplicationServices();
builder.Services.AddStructuredLogging(builder.Configuration);
builder.Services.AddRedisCache(builder.Configuration);
builder.Services.AddRateLimiting();
builder.Services.AddCorsPolicy();
builder.Services.AddJwtAuthentication(builder.Configuration);

// Configurar controllers
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new() { Title = "Colportor API", Version = "v1" });
    
    // Configurar JWT no Swagger
    c.AddSecurityDefinition("Bearer", new()
    {
        Name = "Authorization",
        Type = Microsoft.OpenApi.Models.SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = Microsoft.OpenApi.Models.ParameterLocation.Header,
        Description = "JWT Authorization header using the Bearer scheme."
    });
    
    c.AddSecurityRequirement(new()
    {
        {
            new()
            {
                Reference = new()
                {
                    Type = Microsoft.OpenApi.Models.ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            Array.Empty<string>()
        }
    });
});

// Configurar arquivos estáticos
builder.Services.Configure<IISServerOptions>(options =>
{
    options.AllowSynchronousIO = true;
});

var app = builder.Build();

// Iniciar WhatsApp service em background (não bloqueia)
_ = Task.Run(async () =>
{
    try
    {
        Log.Information("=== INICIANDO WHATSAPP SERVICE EM BACKGROUND ===");
        
        // Verificar se o diretório existe
        var whatsappDir = "/app/whatsapp";
        if (Directory.Exists(whatsappDir))
        {
            Log.Information("Diretório WhatsApp encontrado: {Dir}", whatsappDir);
            
            // Verificar Node.js
            var nodeProcess = new System.Diagnostics.Process
            {
                StartInfo = new System.Diagnostics.ProcessStartInfo
                {
                    FileName = "node",
                    Arguments = "--version",
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    CreateNoWindow = true
                }
            };
            
            nodeProcess.Start();
            var nodeVersion = await nodeProcess.StandardOutput.ReadToEndAsync();
            Log.Information("Node.js versão: {Version}", nodeVersion.Trim());
            
            // Iniciar WhatsApp
            var whatsappProcess = new System.Diagnostics.Process
            {
                StartInfo = new System.Diagnostics.ProcessStartInfo
                {
                    FileName = "npm",
                    Arguments = "start",
                    WorkingDirectory = whatsappDir,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    CreateNoWindow = true
                }
            };
            
            whatsappProcess.Start();
            Log.Information("WhatsApp service iniciado com PID: {PID}", whatsappProcess.Id);
            
            // Aguardar inicialização
            await Task.Delay(30000);
            Log.Information("WhatsApp service deve estar pronto");
        }
        else
        {
            Log.Warning("Diretório WhatsApp não encontrado: {Dir}", whatsappDir);
        }
    }
    catch (Exception ex)
    {
        Log.Error(ex, "Erro ao iniciar WhatsApp service em background");
    }
});

// TEMPORÁRIO: Criar tabelas faltantes usando Entity Framework
try
{
    Log.Information("Criando tabelas faltantes...");
    
    using var scope = app.Services.CreateScope();
    var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    
    // Criar MissionContacts
    await context.Database.ExecuteSqlRawAsync(@"
        CREATE TABLE IF NOT EXISTS ""MissionContacts"" (
            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
            ""RegionId"" integer NOT NULL,
            ""LeaderId"" integer,
            ""CreatedByUserId"" integer NOT NULL,
            ""CreatedByColportorId"" integer,
            ""FullName"" text NOT NULL,
            ""Gender"" text,
            ""BirthDate"" timestamp with time zone,
            ""MaritalStatus"" text,
            ""Nationality"" text,
            ""City"" text,
            ""State"" text,
            ""Phone"" text,
            ""Email"" text,
            ""Profession"" text,
            ""SpeaksOtherLanguages"" boolean NOT NULL,
            ""OtherLanguages"" text,
            ""FluencyLevel"" text,
            ""Church"" text,
            ""ConversionTime"" text,
            ""MissionsDedicationPlan"" text,
            ""HasPassport"" boolean NOT NULL,
            ""AvailableDate"" timestamp with time zone,
            ""Status"" character varying(50) NOT NULL,
            ""Notes"" text,
            ""LastContactedAt"" timestamp with time zone,
            ""NextFollowUpAt"" timestamp with time zone,
            ""CreatedAt"" timestamp with time zone NOT NULL,
            ""UpdatedAt"" timestamp with time zone NOT NULL,
            CONSTRAINT ""PK_MissionContacts"" PRIMARY KEY (""Id""),
            CONSTRAINT ""FK_MissionContacts_Colportors_CreatedByColportorId"" FOREIGN KEY (""CreatedByColportorId"") REFERENCES ""Colportors"" (""Id"") ON DELETE SET NULL,
            CONSTRAINT ""FK_MissionContacts_Regions_RegionId"" FOREIGN KEY (""RegionId"") REFERENCES ""Regions"" (""Id"") ON DELETE RESTRICT,
            CONSTRAINT ""FK_MissionContacts_Users_CreatedByUserId"" FOREIGN KEY (""CreatedByUserId"") REFERENCES ""Users"" (""Id"") ON DELETE RESTRICT,
            CONSTRAINT ""FK_MissionContacts_Users_LeaderId"" FOREIGN KEY (""LeaderId"") REFERENCES ""Users"" (""Id"") ON DELETE SET NULL
        );
    ");
    
    // Criar WhatsAppConnections
    await context.Database.ExecuteSqlRawAsync(@"
        CREATE TABLE IF NOT EXISTS ""WhatsAppConnections"" (
            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
            ""PhoneNumber"" character varying(20) NOT NULL,
            ""Status"" character varying(50) NOT NULL,
            ""LastConnection"" timestamp with time zone,
            ""LastDisconnection"" timestamp with time zone,
            ""QrCode"" character varying(500),
            ""QrCodeGeneratedAt"" timestamp with time zone,
            ""QrCodeExpiresAt"" timestamp with time zone,
            ""ErrorMessage"" character varying(1000),
            ""SessionData"" character varying(100),
            ""CreatedAt"" timestamp with time zone NOT NULL,
            ""UpdatedAt"" timestamp with time zone,
            ""CreatedByUserId"" integer NOT NULL,
            CONSTRAINT ""PK_WhatsAppConnections"" PRIMARY KEY (""Id""),
            CONSTRAINT ""FK_WhatsAppConnections_Users_CreatedByUserId"" FOREIGN KEY (""CreatedByUserId"") REFERENCES ""Users"" (""Id"") ON DELETE CASCADE
        );
    ");
    
    // Criar Reminders
    await context.Database.ExecuteSqlRawAsync(@"
        CREATE TABLE IF NOT EXISTS ""Reminders"" (
            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
            ""ContactId"" integer NOT NULL,
            ""Title"" character varying(200) NOT NULL,
            ""Description"" character varying(1000),
            ""DateTime"" timestamp with time zone NOT NULL,
            ""Priority"" character varying(20) NOT NULL,
            ""Completed"" boolean NOT NULL,
            ""CreatedAt"" timestamp with time zone NOT NULL,
            ""CompletedAt"" timestamp with time zone,
            ""CreatedBy"" character varying(50),
            CONSTRAINT ""PK_Reminders"" PRIMARY KEY (""Id""),
            CONSTRAINT ""FK_Reminders_MissionContacts_ContactId"" FOREIGN KEY (""ContactId"") REFERENCES ""MissionContacts"" (""Id"") ON DELETE CASCADE
        );
    ");
    
    Log.Information("Tabelas criadas com sucesso!");
}
catch (Exception ex)
{
    Log.Error(ex, "Erro ao criar tabelas, mas continuando");
}

// Aplicar migrations automaticamente
using (var scope = app.Services.CreateScope())
{
    var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    try
    {
        var pendingMigrations = context.Database.GetPendingMigrations();
        if (pendingMigrations.Any())
        {
            Log.Information("Aplicando {Count} migrations pendentes: {Migrations}", 
                pendingMigrations.Count(), string.Join(", ", pendingMigrations));
            
            try
            {
                context.Database.Migrate();
                Log.Information("Migrations aplicadas com sucesso");
            }
            catch (Exception migrationEx)
            {
                Log.Error(migrationEx, "Erro ao aplicar migrations pendentes, mas continuando");
            }
        }
        else
        {
            Log.Information("Nenhuma migration pendente encontrada");
        }
    }
    catch (Exception ex)
    {
        Log.Error(ex, "Erro geral ao aplicar migrations - continuando sem falhar a aplicação");
        // Não falhar a aplicação se migrations falharem
    }
}

// Configurar pipeline de request
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// Rate limiting
app.UseIpRateLimiting();

// Cache middleware - temporariamente desabilitado
// app.UseCacheMiddleware();

// CORS
app.UseCors("AllowSpecificOrigins");

// Arquivos estáticos
app.UseDefaultFiles();
app.UseStaticFiles(new StaticFileOptions
{
    OnPrepareResponse = ctx =>
    {
        // Evitar cache para arquivos JavaScript e CSS
        if (ctx.File.Name.EndsWith(".js") || ctx.File.Name.EndsWith(".css"))
        {
            ctx.Context.Response.Headers.Append("Cache-Control", "no-cache, no-store, must-revalidate");
            ctx.Context.Response.Headers.Append("Pragma", "no-cache");
            ctx.Context.Response.Headers.Append("Expires", "0");
        }
    }
});

// Authentication & Authorization
app.UseAuthentication();
app.UseAuthorization();

// Controllers
app.MapControllers();

// Public registration endpoint (legacy compatibility)
app.MapPost("/leaders/register", async (IAuthService authService, RegisterDto registerDto) =>
{
    try
    {
        var result = await authService.RegisterAsync(registerDto);
        if (result.Success)
        {
            return Results.Ok(new { message = "Solicitação de líder enviada com sucesso. Aguarde aprovação." });
        }
        return Results.BadRequest(new { message = result.Message });
    }
    catch (Exception ex)
    {
        return Results.Problem($"Erro ao registrar líder: {ex.Message}");
    }
});

// Health check
app.MapGet("/health", () => Results.Ok(new { status = "ok", timestamp = DateTime.UtcNow }));

// Configurar migrações automáticas (apenas em desenvolvimento)
if (app.Environment.IsDevelopment())
{
    // Executar migrações automaticamente com retry
    using var scope = app.Services.CreateScope();
    var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();

    var maxRetries = 5;
    var delay = 2000; // 2 segundos

    for (int i = 0; i < maxRetries; i++)
    {
        try
        {
            await context.Database.MigrateAsync();
            break;
        }
        catch (Exception ex) when (i < maxRetries - 1)
        {
            Console.WriteLine($"Tentativa {i + 1} de migração falhou: {ex.Message}. Aguardando {delay}ms...");
            await Task.Delay(delay);
            delay *= 2; // Exponential backoff
        }
    }

    // Executar seed data
    try
    {
        var seedService = scope.ServiceProvider.GetRequiredService<SeedDataService>();
        await seedService.SeedAsync();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Erro ao executar seed data: {ex.Message}");
    }
}

Log.Information("Colportor API iniciada com sucesso");

app.Run();
