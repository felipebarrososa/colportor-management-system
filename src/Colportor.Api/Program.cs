using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using Colportor.Api.Extensions;
using Colportor.Api.Data;
using Colportor.Api.Services;
using Colportor.Api.DTOs;
using Microsoft.EntityFrameworkCore;
using Serilog;
using AspNetCoreRateLimit;
using Npgsql;

var builder = WebApplication.CreateBuilder(args);

// Configurar Serilog
builder.Host.UseSerilog((context, configuration) =>
    configuration.ReadFrom.Configuration(context.Configuration));

// Configurar serviços
builder.Services.AddDatabaseServices(builder.Configuration);
builder.Services.AddApplicationServices();
builder.Services.AddStructuredLogging(builder.Configuration);
builder.Services.AddRedisCache(builder.Configuration);
builder.Services.AddRateLimiting();
builder.Services.AddCorsPolicy();
builder.Services.AddJwtAuthentication(builder.Configuration);

// Configurar controllers
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new() { Title = "Colportor API", Version = "v1" });
    
    // Configurar JWT no Swagger
    c.AddSecurityDefinition("Bearer", new()
    {
        Name = "Authorization",
        Type = Microsoft.OpenApi.Models.SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = Microsoft.OpenApi.Models.ParameterLocation.Header,
        Description = "JWT Authorization header using the Bearer scheme."
    });
    
    c.AddSecurityRequirement(new()
    {
        {
            new()
            {
                Reference = new()
                {
                    Type = Microsoft.OpenApi.Models.ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            Array.Empty<string>()
        }
    });
});

// Configurar arquivos estáticos
builder.Services.Configure<IISServerOptions>(options =>
{
    options.AllowSynchronousIO = true;
});

var app = builder.Build();

// TEMPORÁRIO: Forçar aplicação de migrations específicas
try
{
    Log.Information("Forçando aplicação de migrations específicas...");
    
    using var scope = app.Services.CreateScope();
    var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    
    // Marcar migrations antigas como aplicadas
    var migrationsToMark = new[]
    {
        "202409290001_Initial",
        "20251001124027_AddLeaderPersonalData", 
        "20251001193944_AddPacEnrollmentsToColportor",
        "20251001212504_FixColportorLeaderRelationship",
        "20251001213603_RemoveColportorCountryProperties",
        "20251002124656_AddGenderAndBirthDateToColportors",
        "20251002130658_AddGenderBirthDateSimple",
        "20251013220000_AddPhotosTable"
    };
    
    foreach (var migration in migrationsToMark)
    {
        try
        {
            Log.Information("Marcando migration {Migration} como aplicada", migration);
            await context.Database.ExecuteSqlRawAsync(
                "INSERT INTO \"__EFMigrationsHistory\" (\"MigrationId\", \"ProductVersion\") VALUES ({0}, {1}) ON CONFLICT DO NOTHING",
                migration, "8.0.8");
        }
        catch (Exception ex)
        {
            Log.Warning(ex, "Erro ao marcar migration {Migration}", migration);
        }
    }
    
    // Aplicar migrations específicas que criam as tabelas
    var specificMigrations = new[]
    {
        "20251020134639_AddMissionContacts",
        "20251020150000_AddContactObservations", 
        "20251020175643_WhatsAppTablesCreated",
        "20251024012704_AddRemindersTable"
    };
    
    foreach (var migration in specificMigrations)
    {
        try
        {
            Log.Information("Aplicando migration específica: {Migration}", migration);
            await context.Database.ExecuteSqlRawAsync(
                "INSERT INTO \"__EFMigrationsHistory\" (\"MigrationId\", \"ProductVersion\") VALUES ({0}, {1}) ON CONFLICT DO NOTHING",
                migration, "8.0.8");
            
            // Executar SQL da migration diretamente
            await ExecuteMigrationSql(context, migration);
        }
        catch (Exception ex)
        {
            Log.Warning(ex, "Erro ao aplicar migration {Migration}", migration);
        }
    }
    
    Log.Information("Migrations específicas aplicadas!");
}
catch (Exception ex)
{
    Log.Error(ex, "Erro ao aplicar migrations específicas, mas continuando");
}

// Função auxiliar para executar SQL das migrations
static async Task ExecuteMigrationSql(AppDbContext context, string migrationId)
{
    try
    {
        switch (migrationId)
        {
            case "20251020134639_AddMissionContacts":
                await context.Database.ExecuteSqlRawAsync(@"
                    CREATE TABLE IF NOT EXISTS ""MissionContacts"" (
                        ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                        ""RegionId"" integer NOT NULL,
                        ""LeaderId"" integer,
                        ""CreatedByUserId"" integer NOT NULL,
                        ""CreatedByColportorId"" integer,
                        ""FullName"" text NOT NULL,
                        ""Gender"" text,
                        ""BirthDate"" timestamp with time zone,
                        ""MaritalStatus"" text,
                        ""Nationality"" text,
                        ""City"" text,
                        ""State"" text,
                        ""Phone"" text,
                        ""Email"" text,
                        ""Profession"" text,
                        ""SpeaksOtherLanguages"" boolean NOT NULL,
                        ""OtherLanguages"" text,
                        ""FluencyLevel"" text,
                        ""Church"" text,
                        ""ConversionTime"" text,
                        ""MissionsDedicationPlan"" text,
                        ""HasPassport"" boolean NOT NULL,
                        ""AvailableDate"" timestamp with time zone,
                        ""Status"" character varying(50) NOT NULL,
                        ""Notes"" text,
                        ""LastContactedAt"" timestamp with time zone,
                        ""NextFollowUpAt"" timestamp with time zone,
                        ""CreatedAt"" timestamp with time zone NOT NULL,
                        ""UpdatedAt"" timestamp with time zone NOT NULL,
                        CONSTRAINT ""PK_MissionContacts"" PRIMARY KEY (""Id""),
                        CONSTRAINT ""FK_MissionContacts_Colportors_CreatedByColportorId"" FOREIGN KEY (""CreatedByColportorId"") REFERENCES ""Colportors"" (""Id"") ON DELETE SET NULL,
                        CONSTRAINT ""FK_MissionContacts_Regions_RegionId"" FOREIGN KEY (""RegionId"") REFERENCES ""Regions"" (""Id"") ON DELETE RESTRICT,
                        CONSTRAINT ""FK_MissionContacts_Users_CreatedByUserId"" FOREIGN KEY (""CreatedByUserId"") REFERENCES ""Users"" (""Id"") ON DELETE RESTRICT,
                        CONSTRAINT ""FK_MissionContacts_Users_LeaderId"" FOREIGN KEY (""LeaderId"") REFERENCES ""Users"" (""Id"") ON DELETE SET NULL
                    );
                    CREATE INDEX IF NOT EXISTS ""IX_MissionContacts_CreatedAt"" ON ""MissionContacts"" (""CreatedAt"");
                    CREATE INDEX IF NOT EXISTS ""IX_MissionContacts_CreatedByColportorId"" ON ""MissionContacts"" (""CreatedByColportorId"");
                    CREATE INDEX IF NOT EXISTS ""IX_MissionContacts_CreatedByUserId"" ON ""MissionContacts"" (""CreatedByUserId"");
                    CREATE INDEX IF NOT EXISTS ""IX_MissionContacts_LeaderId"" ON ""MissionContacts"" (""LeaderId"");
                    CREATE INDEX IF NOT EXISTS ""IX_MissionContacts_RegionId"" ON ""MissionContacts"" (""RegionId"");
                    CREATE INDEX IF NOT EXISTS ""IX_MissionContacts_Status"" ON ""MissionContacts"" (""Status"");
                ");
                break;
                
            case "20251020150000_AddContactObservations":
                await context.Database.ExecuteSqlRawAsync(@"
                    CREATE TABLE IF NOT EXISTS ""ContactObservations"" (
                        ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                        ""MissionContactId"" integer NOT NULL,
                        ""Type"" character varying(50) NOT NULL,
                        ""Title"" character varying(200) NOT NULL,
                        ""Content"" text NOT NULL,
                        ""Author"" character varying(100) NOT NULL,
                        ""CreatedAt"" timestamp with time zone NOT NULL,
                        CONSTRAINT ""PK_ContactObservations"" PRIMARY KEY (""Id""),
                        CONSTRAINT ""FK_ContactObservations_MissionContacts_MissionContactId"" FOREIGN KEY (""MissionContactId"") REFERENCES ""MissionContacts"" (""Id"") ON DELETE CASCADE
                    );
                    CREATE TABLE IF NOT EXISTS ""ContactStatusHistories"" (
                        ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                        ""MissionContactId"" integer NOT NULL,
                        ""FromStatus"" character varying(50) NOT NULL,
                        ""ToStatus"" character varying(50) NOT NULL,
                        ""ChangedBy"" character varying(100),
                        ""ChangedAt"" timestamp with time zone NOT NULL,
                        ""Notes"" character varying(500),
                        CONSTRAINT ""PK_ContactStatusHistories"" PRIMARY KEY (""Id""),
                        CONSTRAINT ""FK_ContactStatusHistories_MissionContacts_MissionContactId"" FOREIGN KEY (""MissionContactId"") REFERENCES ""MissionContacts"" (""Id"") ON DELETE CASCADE
                    );
                    CREATE INDEX IF NOT EXISTS ""IX_ContactObservations_MissionContactId"" ON ""ContactObservations"" (""MissionContactId"");
                    CREATE INDEX IF NOT EXISTS ""IX_ContactObservations_CreatedAt"" ON ""ContactObservations"" (""CreatedAt"");
                    CREATE INDEX IF NOT EXISTS ""IX_ContactStatusHistories_MissionContactId"" ON ""ContactStatusHistories"" (""MissionContactId"");
                    CREATE INDEX IF NOT EXISTS ""IX_ContactStatusHistories_ChangedAt"" ON ""ContactStatusHistories"" (""ChangedAt"");
                ");
                break;
                
            case "20251020175643_WhatsAppTablesCreated":
                await context.Database.ExecuteSqlRawAsync(@"
                    CREATE TABLE IF NOT EXISTS ""WhatsAppConnections"" (
                        ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                        ""PhoneNumber"" character varying(20) NOT NULL,
                        ""Status"" character varying(50) NOT NULL,
                        ""LastConnection"" timestamp with time zone,
                        ""LastDisconnection"" timestamp with time zone,
                        ""QrCode"" character varying(500),
                        ""QrCodeGeneratedAt"" timestamp with time zone,
                        ""QrCodeExpiresAt"" timestamp with time zone,
                        ""ErrorMessage"" character varying(1000),
                        ""SessionData"" character varying(100),
                        ""CreatedAt"" timestamp with time zone NOT NULL,
                        ""UpdatedAt"" timestamp with time zone,
                        ""CreatedByUserId"" integer NOT NULL,
                        CONSTRAINT ""PK_WhatsAppConnections"" PRIMARY KEY (""Id""),
                        CONSTRAINT ""FK_WhatsAppConnections_Users_CreatedByUserId"" FOREIGN KEY (""CreatedByUserId"") REFERENCES ""Users"" (""Id"") ON DELETE CASCADE
                    );
                    CREATE TABLE IF NOT EXISTS ""WhatsAppMessages"" (
                        ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                        ""MissionContactId"" integer NOT NULL,
                        ""Content"" character varying(1000) NOT NULL,
                        ""Sender"" character varying(50) NOT NULL,
                        ""Timestamp"" timestamp with time zone NOT NULL,
                        ""Status"" character varying(20) NOT NULL,
                        ""MediaUrl"" character varying(500),
                        ""MediaType"" character varying(50),
                        ""WhatsAppMessageId"" character varying(100),
                        ""SentByUserId"" integer,
                        CONSTRAINT ""PK_WhatsAppMessages"" PRIMARY KEY (""Id""),
                        CONSTRAINT ""FK_WhatsAppMessages_MissionContacts_MissionContactId"" FOREIGN KEY (""MissionContactId"") REFERENCES ""MissionContacts"" (""Id"") ON DELETE CASCADE,
                        CONSTRAINT ""FK_WhatsAppMessages_Users_SentByUserId"" FOREIGN KEY (""SentByUserId"") REFERENCES ""Users"" (""Id"") ON DELETE SET NULL
                    );
                    CREATE TABLE IF NOT EXISTS ""WhatsAppTemplates"" (
                        ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                        ""Name"" character varying(100) NOT NULL,
                        ""Content"" character varying(1000) NOT NULL,
                        ""Category"" character varying(50) NOT NULL,
                        ""IsActive"" boolean NOT NULL,
                        ""CreatedAt"" timestamp with time zone NOT NULL,
                        ""UpdatedAt"" timestamp with time zone,
                        ""CreatedByUserId"" integer NOT NULL,
                        ""AvailableVariables"" character varying(500),
                        CONSTRAINT ""PK_WhatsAppTemplates"" PRIMARY KEY (""Id""),
                        CONSTRAINT ""FK_WhatsAppTemplates_Users_CreatedByUserId"" FOREIGN KEY (""CreatedByUserId"") REFERENCES ""Users"" (""Id"") ON DELETE CASCADE
                    );
                    CREATE INDEX IF NOT EXISTS ""IX_WhatsAppConnections_CreatedAt"" ON ""WhatsAppConnections"" (""CreatedAt"");
                    CREATE INDEX IF NOT EXISTS ""IX_WhatsAppConnections_CreatedByUserId"" ON ""WhatsAppConnections"" (""CreatedByUserId"");
                    CREATE INDEX IF NOT EXISTS ""IX_WhatsAppConnections_PhoneNumber"" ON ""WhatsAppConnections"" (""PhoneNumber"");
                    CREATE INDEX IF NOT EXISTS ""IX_WhatsAppConnections_Status"" ON ""WhatsAppConnections"" (""Status"");
                    CREATE INDEX IF NOT EXISTS ""IX_WhatsAppMessages_MissionContactId"" ON ""WhatsAppMessages"" (""MissionContactId"");
                    CREATE INDEX IF NOT EXISTS ""IX_WhatsAppMessages_SentByUserId"" ON ""WhatsAppMessages"" (""SentByUserId"");
                    CREATE INDEX IF NOT EXISTS ""IX_WhatsAppMessages_Status"" ON ""WhatsAppMessages"" (""Status"");
                    CREATE INDEX IF NOT EXISTS ""IX_WhatsAppMessages_Timestamp"" ON ""WhatsAppMessages"" (""Timestamp"");
                    CREATE INDEX IF NOT EXISTS ""IX_WhatsAppTemplates_Category"" ON ""WhatsAppTemplates"" (""Category"");
                    CREATE INDEX IF NOT EXISTS ""IX_WhatsAppTemplates_CreatedAt"" ON ""WhatsAppTemplates"" (""CreatedAt"");
                    CREATE INDEX IF NOT EXISTS ""IX_WhatsAppTemplates_CreatedByUserId"" ON ""WhatsAppTemplates"" (""CreatedByUserId"");
                    CREATE INDEX IF NOT EXISTS ""IX_WhatsAppTemplates_IsActive"" ON ""WhatsAppTemplates"" (""IsActive"");
                ");
                break;
                
            case "20251024012704_AddRemindersTable":
                await context.Database.ExecuteSqlRawAsync(@"
                    CREATE TABLE IF NOT EXISTS ""Reminders"" (
                        ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                        ""ContactId"" integer NOT NULL,
                        ""Title"" character varying(200) NOT NULL,
                        ""Description"" character varying(1000),
                        ""DateTime"" timestamp with time zone NOT NULL,
                        ""Priority"" character varying(20) NOT NULL,
                        ""Completed"" boolean NOT NULL,
                        ""CreatedAt"" timestamp with time zone NOT NULL,
                        ""CompletedAt"" timestamp with time zone,
                        ""CreatedBy"" character varying(50),
                        CONSTRAINT ""PK_Reminders"" PRIMARY KEY (""Id""),
                        CONSTRAINT ""FK_Reminders_MissionContacts_ContactId"" FOREIGN KEY (""ContactId"") REFERENCES ""MissionContacts"" (""Id"") ON DELETE CASCADE
                    );
                    CREATE INDEX IF NOT EXISTS ""IX_Reminders_Completed"" ON ""Reminders"" (""Completed"");
                    CREATE INDEX IF NOT EXISTS ""IX_Reminders_ContactId"" ON ""Reminders"" (""ContactId"");
                    CREATE INDEX IF NOT EXISTS ""IX_Reminders_CreatedAt"" ON ""Reminders"" (""CreatedAt"");
                    CREATE INDEX IF NOT EXISTS ""IX_Reminders_DateTime"" ON ""Reminders"" (""DateTime"");
                ");
                break;
        }
    }
    catch (Exception ex)
    {
        Log.Warning(ex, "Erro ao executar SQL da migration {Migration}", migrationId);
    }
}

// Aplicar migrations automaticamente
using (var scope = app.Services.CreateScope())
{
    var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    try
    {
        var pendingMigrations = context.Database.GetPendingMigrations();
        if (pendingMigrations.Any())
        {
            Log.Information("Aplicando {Count} migrations pendentes: {Migrations}", 
                pendingMigrations.Count(), string.Join(", ", pendingMigrations));
            
            try
            {
                context.Database.Migrate();
                Log.Information("Migrations aplicadas com sucesso");
            }
            catch (Exception migrationEx)
            {
                Log.Error(migrationEx, "Erro ao aplicar migrations pendentes, mas continuando");
            }
        }
        else
        {
            Log.Information("Nenhuma migration pendente encontrada");
        }
    }
    catch (Exception ex)
    {
        Log.Error(ex, "Erro geral ao aplicar migrations - continuando sem falhar a aplicação");
        // Não falhar a aplicação se migrations falharem
    }
}

// Configurar pipeline de request
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// Rate limiting
app.UseIpRateLimiting();

// Cache middleware - temporariamente desabilitado
// app.UseCacheMiddleware();

// CORS
app.UseCors("AllowSpecificOrigins");

// Arquivos estáticos
app.UseDefaultFiles();
app.UseStaticFiles(new StaticFileOptions
{
    OnPrepareResponse = ctx =>
    {
        // Evitar cache para arquivos JavaScript e CSS
        if (ctx.File.Name.EndsWith(".js") || ctx.File.Name.EndsWith(".css"))
        {
            ctx.Context.Response.Headers.Append("Cache-Control", "no-cache, no-store, must-revalidate");
            ctx.Context.Response.Headers.Append("Pragma", "no-cache");
            ctx.Context.Response.Headers.Append("Expires", "0");
        }
    }
});

// Authentication & Authorization
app.UseAuthentication();
app.UseAuthorization();

// Controllers
app.MapControllers();

// Public registration endpoint (legacy compatibility)
app.MapPost("/leaders/register", async (IAuthService authService, RegisterDto registerDto) =>
{
    try
    {
        var result = await authService.RegisterAsync(registerDto);
        if (result.Success)
        {
            return Results.Ok(new { message = "Solicitação de líder enviada com sucesso. Aguarde aprovação." });
        }
        return Results.BadRequest(new { message = result.Message });
    }
    catch (Exception ex)
    {
        return Results.Problem($"Erro ao registrar líder: {ex.Message}");
    }
});

// Health check
app.MapGet("/health", () => Results.Ok(new { status = "ok", timestamp = DateTime.UtcNow }));

// Configurar migrações automáticas (apenas em desenvolvimento)
if (app.Environment.IsDevelopment())
{
    // Executar migrações automaticamente com retry
    using var scope = app.Services.CreateScope();
    var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();

    var maxRetries = 5;
    var delay = 2000; // 2 segundos

    for (int i = 0; i < maxRetries; i++)
    {
        try
        {
            await context.Database.MigrateAsync();
            break;
        }
        catch (Exception ex) when (i < maxRetries - 1)
        {
            Console.WriteLine($"Tentativa {i + 1} de migração falhou: {ex.Message}. Aguardando {delay}ms...");
            await Task.Delay(delay);
            delay *= 2; // Exponential backoff
        }
    }

    // Executar seed data
    try
    {
        var seedService = scope.ServiceProvider.GetRequiredService<SeedDataService>();
        await seedService.SeedAsync();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Erro ao executar seed data: {ex.Message}");
    }
}

Log.Information("Colportor API iniciada com sucesso");

app.Run();
