version: '3.8'

services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: colportor
      POSTGRES_USER: colp
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U colp -d colportor"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__Default: Host=db;Port=5432;Database=colportor;Username=colp;Password=${POSTGRES_PASSWORD}
      Jwt__Key: ${JWT_KEY}
      Smtp__Host: ${SMTP_HOST}
      Smtp__Port: ${SMTP_PORT}
      Smtp__Username: ${SMTP_USERNAME}
      Smtp__Password: ${SMTP_PASSWORD}
      Smtp__From: ${SMTP_FROM}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: src/Colportor.Worker/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionStrings__Default: Host=db;Port=5432;Database=colportor;Username=colp;Password=${POSTGRES_PASSWORD}
      Smtp__Host: ${SMTP_HOST}
      Smtp__Port: ${SMTP_PORT}
      Smtp__Username: ${SMTP_USERNAME}
      Smtp__Password: ${SMTP_PASSWORD}
      Smtp__From: ${SMTP_FROM}
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    restart: unless-stopped

  whatsapp:
    build:
      context: ./whatsapp-service
      dockerfile: Dockerfile
    environment:
      PORT: 3001
      NODE_ENV: production
    ports:
      - "3001:3001"
    volumes:
      - whatsapp_data:/app/.wwebjs_auth
    restart: unless-stopped

volumes:
  postgres_data:
  whatsapp_data:
